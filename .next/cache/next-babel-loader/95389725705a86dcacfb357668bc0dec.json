{"ast":null,"code":"var _jsxFileName = \"/Users/daveregg/git-repository-projects/nextjs-weather/pages/city/[weather].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\n/*\n\nTODO\n= break up functions\n= color scheme\n\n*/\nimport { useState } from 'react';\nimport weatherStyles from './weather.module.scss';\nimport utilStyles from '../../styles/utils.module.scss';\nimport Layout from '../../components/layout/layout';\nimport Current from '../../components/weather/current';\nimport Hourly from '../../components/weather/hourly';\nimport Daily from '../../components/weather/daily'; // Will return weather from the search query\n\nconst Weather = ({\n  weather,\n  location\n}) => {\n  const {\n    0: units,\n    1: changeUnits\n  } = useState({\n    isFahrenheit: false,\n    isCelsius: true,\n    isKelvin: false\n  });\n  let {\n    isFahrenheit,\n    isCelsius\n  } = units;\n  const datetime = Date.now();\n  const {\n    city,\n    state,\n    state_code,\n    country_code\n  } = location.components;\n  let link;\n\n  if (city !== undefined) {\n    link = city.toLowerCase();\n  } else {\n    link = state.toLowerCase();\n  }\n\n  const handleFahrenheit = () => {\n    changeUnits({\n      isFahrenheit: true,\n      isCelsius: false,\n      isKelvin: false\n    });\n  };\n\n  const handleCelsius = () => {\n    changeUnits({\n      isFahrenheit: false,\n      isCelsius: true,\n      isKelvin: false\n    });\n  };\n\n  const handleKelvin = () => {\n    changeUnits({\n      isFahrenheit: false,\n      isCelsius: false,\n      isKelvin: true\n    });\n  };\n\n  const {\n    current\n  } = weather;\n  const daily = weather.daily.slice(0, 5);\n  const hourly = weather.hourly.slice(0, 12);\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: weatherStyles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: weatherStyles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }, `${city ? city : state}, ${state_code !== undefined ? state_code + ',' : ''} ${country_code.toUpperCase()}`), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, __jsx(\"span\", {\n    onClick: handleCelsius,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 14\n    }\n  }, \"\\xB0C\"), \" | \", __jsx(\"span\", {\n    onClick: handleFahrenheit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 60\n    }\n  }, \"\\xB0F\"), \" | \", __jsx(\"span\", {\n    onClick: handleKelvin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 109\n    }\n  }, \"\\xB0K\"))), __jsx(\"div\", {\n    className: weatherStyles.main,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, __jsx(Hourly, {\n    isFahrenheit: isFahrenheit,\n    isCelsius: isCelsius,\n    link: link,\n    hourly: hourly,\n    datetime: datetime,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }), __jsx(Current, {\n    isFahrenheit: isFahrenheit,\n    isCelsius: isCelsius,\n    current: current,\n    datetime: datetime,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }), __jsx(Daily, {\n    isFahrenheit: isFahrenheit,\n    isCelsius: isCelsius,\n    link: link,\n    daily: daily,\n    datetime: datetime,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport async function getServerSideProps(ctx) {\n  const loc_res = await fetch(`https://api.opencagedata.com/geocode/v1/json?key=9509e53adb5442c8829342e5c5b15438&q=${ctx.query.city}`);\n  const loc_data = await loc_res.json(); // access lat and long from data\n\n  const {\n    lat,\n    lng\n  } = loc_data.results[0].geometry; // search for weather data with lat and long data\n\n  const weather_res = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lng}&appid=${process.env.WEATHER_API}&units=metric`);\n  const weather_data = await weather_res.json();\n  console.log(weather_data); // return to props\n\n  return {\n    props: {\n      location: loc_data.results[0],\n      weather: weather_data\n    }\n  };\n}\nexport default Weather;","map":{"version":3,"sources":["/Users/daveregg/git-repository-projects/nextjs-weather/pages/city/[weather].js"],"names":["useState","weatherStyles","utilStyles","Layout","Current","Hourly","Daily","Weather","weather","location","units","changeUnits","isFahrenheit","isCelsius","isKelvin","datetime","Date","now","city","state","state_code","country_code","components","link","undefined","toLowerCase","handleFahrenheit","handleCelsius","handleKelvin","current","daily","slice","hourly","container","title","toUpperCase","main","getServerSideProps","ctx","loc_res","fetch","query","loc_data","json","lat","lng","results","geometry","weather_res","process","env","WEATHER_API","weather_data","console","log","props"],"mappings":"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","sourcesContent":["/*\n\nTODO\n= break up functions\n= color scheme\n\n*/\nimport { useState } from 'react';\nimport weatherStyles from './weather.module.scss';\nimport utilStyles from '../../styles/utils.module.scss';\n\nimport Layout from '../../components/layout/layout';\nimport Current from '../../components/weather/current';\nimport Hourly from '../../components/weather/hourly';\nimport Daily from '../../components/weather/daily';\n\n// Will return weather from the search query\nconst Weather = ({ weather, location }) => {\n  const [ units, changeUnits ] = useState({\n    isFahrenheit: false,\n    isCelsius: true,\n    isKelvin: false\n  });\n  let { isFahrenheit, isCelsius } = units;\n\n  const datetime = Date.now();\n  const { city, state, state_code, country_code } = location.components;\n  let link;\n  if (city !== undefined) {\n    link = city.toLowerCase();\n  } else {\n    link = state.toLowerCase();\n  }\n\n  const handleFahrenheit = () => {\n    changeUnits({\n      isFahrenheit: true,\n      isCelsius: false,\n      isKelvin: false\n    });\n  }\n  const handleCelsius = () => {\n    changeUnits({\n      isFahrenheit: false,\n      isCelsius: true,\n      isKelvin: false\n    });\n  }\n  const handleKelvin = () => {\n    changeUnits({\n      isFahrenheit: false,\n      isCelsius: false,\n      isKelvin: true\n    })\n  }\n\n  const { current } = weather;\n  const daily = weather.daily.slice(0,5)\n  const hourly = weather.hourly.slice(0,12);\n  return (\n    <Layout>\n      <div className={weatherStyles.container}>\n        <div className={weatherStyles.title}>\n          <h1>{`${city ? city : state}, ${state_code !== undefined ? state_code + ',' : ''} ${country_code.toUpperCase()}`}</h1>\n          <p><span onClick={handleCelsius}>&deg;C</span> | <span onClick={handleFahrenheit}>&deg;F</span> | <span onClick={handleKelvin}>&deg;K</span></p>\n        </div>\n        <div className={weatherStyles.main}>\n          <Hourly\n            isFahrenheit={isFahrenheit}\n            isCelsius={isCelsius}\n            link={link}\n            hourly={hourly}\n            datetime={datetime}\n          />\n          <Current\n            isFahrenheit={isFahrenheit}\n            isCelsius={isCelsius}\n            current={current}\n            datetime={datetime}\n          />\n          <Daily\n            isFahrenheit={isFahrenheit}\n            isCelsius={isCelsius}\n            link={link}\n            daily={daily}\n            datetime={datetime}\n          />\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport async function getServerSideProps(ctx) {\n  const loc_res = await fetch(`https://api.opencagedata.com/geocode/v1/json?key=9509e53adb5442c8829342e5c5b15438&q=${ctx.query.city}`);\n  const loc_data = await loc_res.json();\n  // access lat and long from data\n  const { lat, lng } = loc_data.results[0].geometry;\n  // search for weather data with lat and long data\n  const weather_res = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lng}&appid=${process.env.WEATHER_API}&units=metric`);\n  const weather_data = await weather_res.json()\n\n  console.log(weather_data);\n  // return to props\n  return {\n    props: {\n      location: loc_data.results[0],\n      weather: weather_data\n    }\n  }\n}\n\nexport default Weather;"]},"metadata":{},"sourceType":"module"}