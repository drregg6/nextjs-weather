{"ast":null,"code":"var _jsxFileName = \"/Users/daveregg/git-repository-projects/nextjs-weather/pages/city/daily.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\n/*\n\nPrec %\nWind Dir / Speed\nHumidity %\n\n*/\nimport Link from 'next/link';\nimport Moment from 'react-moment';\nimport { getIcon } from '../../utils/weatherHelper';\nimport { capitalize } from '../../utils/stringHelper';\nimport dailyStyles from './daily.module.scss';\nimport Layout from '../../components/layout/layout';\n\nconst Daily = ({\n  location,\n  daily\n}) => {\n  console.log(daily);\n  let isFahrenheit = true;\n  let isCelsius = false;\n  let isKelvine = false;\n  const datetime = Date.now();\n  const {\n    city,\n    state\n  } = location.components;\n  let link;\n\n  if (city !== undefined) {\n    link = city.toLowerCase();\n  } else {\n    link = state.toLowerCase();\n  }\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: dailyStyles.top,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, __jsx(Link, {\n    href: `/city/weather?city=${city}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, __jsx(\"a\", {\n    className: dailyStyles.back,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 51\n    }\n  }, \"\\u2190 Go back\")), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 12\n    }\n  }, \"C\"), \" | \", __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 29\n    }\n  }, \"F\"), \" | \", __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 46\n    }\n  }, \"K\"))), __jsx(\"h1\", {\n    className: dailyStyles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, link.toUpperCase()), __jsx(\"div\", {\n    className: dailyStyles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, daily.slice(0, 5).map((day, idx) => {\n    const humidity = day.humidity;\n    const highTemp = Math.floor(day.temp.max);\n    const lowTemp = Math.floor(day.temp.min);\n    const feelsLike = Math.floor(day.feels_like.day);\n    return __jsx(\"div\", {\n      key: idx,\n      className: dailyStyles.day,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 15\n      }\n    }, __jsx(\"div\", {\n      className: dailyStyles.dayTitle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }\n    }, __jsx(\"small\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 19\n      }\n    }, __jsx(Moment, {\n      add: {\n        days: `${idx}`\n      },\n      format: \"dddd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 26\n      }\n    }, datetime)), __jsx(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 19\n      }\n    }, __jsx(Moment, {\n      add: {\n        days: `${idx + 1}`\n      },\n      format: \"DD MMM\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 23\n      }\n    }, datetime))), __jsx(\"img\", {\n      src: getIcon(day.weather[0].icon),\n      alt: day.weather[0].description,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }\n    }), __jsx(\"small\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }\n    }, capitalize(day.weather[0].description)), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }\n    }, highTemp, \"\\xB0F / \", lowTemp, \"\\xB0F\"), __jsx(\"small\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }\n    }, feelsLike, \"\\xB0F\"));\n  })));\n};\n\nexport async function getServerSideProps(ctx) {\n  const loc_res = await fetch(`https://api.opencagedata.com/geocode/v1/json?key=9509e53adb5442c8829342e5c5b15438&q=${ctx.query.city}`);\n  const loc_data = await loc_res.json(); // access lat and long from data\n\n  const {\n    lat,\n    lng\n  } = loc_data.results[0].geometry; // search for weather data with lat and long data\n\n  const weather_res = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lng}&appid=${process.env.WEATHER_API}&units=imperial`);\n  const weather_data = await weather_res.json();\n  console.log(weather_data); // return to props\n\n  return {\n    props: {\n      location: loc_data.results[0],\n      daily: weather_data.daily\n    }\n  };\n}\nexport default Daily;","map":{"version":3,"sources":["/Users/daveregg/git-repository-projects/nextjs-weather/pages/city/daily.js"],"names":["Link","Moment","getIcon","capitalize","dailyStyles","Layout","Daily","location","daily","console","log","isFahrenheit","isCelsius","isKelvine","datetime","Date","now","city","state","components","link","undefined","toLowerCase","top","back","title","toUpperCase","container","slice","map","day","idx","humidity","highTemp","Math","floor","temp","max","lowTemp","min","feelsLike","feels_like","dayTitle","days","weather","icon","description","getServerSideProps","ctx","loc_res","fetch","query","loc_data","json","lat","lng","results","geometry","weather_res","process","env","WEATHER_API","weather_data","props"],"mappings":"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","sourcesContent":["/*\n\nPrec %\nWind Dir / Speed\nHumidity %\n\n*/\n\nimport Link from 'next/link';\nimport Moment from 'react-moment';\nimport { getIcon } from '../../utils/weatherHelper';\nimport { capitalize } from '../../utils/stringHelper';\nimport dailyStyles from './daily.module.scss';\n\nimport Layout from '../../components/layout/layout';\n\nconst Daily = ({ location, daily }) => {\n  console.log(daily)\n  let isFahrenheit = true;\n  let isCelsius = false;\n  let isKelvine = false;\n  const datetime = Date.now();\n  const { city, state } = location.components;\n  let link;\n  if (city !== undefined) {\n    link = city.toLowerCase();\n  } else {\n    link = state.toLowerCase();\n  }\n  return (\n    <Layout>\n      <div className={dailyStyles.top}>\n        <Link href={`/city/weather?city=${city}`}><a className={dailyStyles.back}>&#8592; Go back</a></Link>\n        <p><span>C</span> | <span>F</span> | <span>K</span></p>\n      </div>\n      <h1 className={dailyStyles.title}>{ link.toUpperCase() }</h1>\n      <div className={dailyStyles.container}>\n        {\n          daily.slice(0,5).map((day, idx) => {\n            const humidity = day.humidity;\n            const highTemp = Math.floor(day.temp.max);\n            const lowTemp = Math.floor(day.temp.min);\n            const feelsLike = Math.floor(day.feels_like.day);\n            return (\n              <div key={idx} className={dailyStyles.day}>\n                <div className={dailyStyles.dayTitle}>\n                  <small><Moment add={{ days: `${idx}` }} format=\"dddd\">{datetime}</Moment></small>\n                  <h2><Moment add={{ days: `${idx+1}` }} format=\"DD MMM\">{datetime}</Moment></h2>\n                </div>\n                <img src={getIcon(day.weather[0].icon)} alt={day.weather[0].description} />\n                <small>{ capitalize(day.weather[0].description) }</small>\n                <p>{highTemp}&deg;F / {lowTemp}&deg;F</p>\n                <small>{feelsLike}&deg;F</small>\n              </div>\n            )\n          })\n        }\n      </div>\n    </Layout>\n  )\n}\n\nexport async function getServerSideProps(ctx) {\n  const loc_res = await fetch(`https://api.opencagedata.com/geocode/v1/json?key=9509e53adb5442c8829342e5c5b15438&q=${ctx.query.city}`);\n  const loc_data = await loc_res.json();\n  // access lat and long from data\n  const { lat, lng } = loc_data.results[0].geometry;\n  // search for weather data with lat and long data\n  const weather_res = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lng}&appid=${process.env.WEATHER_API}&units=imperial`);\n  const weather_data = await weather_res.json()\n\n  console.log(weather_data);\n  // return to props\n  return {\n    props: {\n      location: loc_data.results[0],\n      daily: weather_data.daily\n    }\n  }\n}\n\nexport default Daily;"]},"metadata":{},"sourceType":"module"}