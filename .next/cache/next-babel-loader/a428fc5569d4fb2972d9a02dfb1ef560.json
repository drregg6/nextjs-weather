{"ast":null,"code":"var _jsxFileName = \"/Users/daveregg/git-repository-projects/nextjs-weather/pages/city/[weather].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\n/*\n\nTODO\n= fallback to index when error\n= create components for flash, hourly, and daily\n= create components to isolate and provide more information(?)\n\n*/\nimport weatherStyles from './weather.module.scss';\nimport Layout from '../../components/layout/layout';\nimport Current from '../../components/weather/current';\nimport Hourly from '../../components/weather/hourly';\nimport Daily from '../../components/weather/daily'; // Will return weather from the search query\n\nconst Weather = ({\n  weather,\n  location\n}) => {\n  console.log(location);\n  const datetime = Date.now();\n  const {\n    city,\n    state,\n    state_code,\n    country_code\n  } = location.components;\n  const {\n    current\n  } = weather;\n  const daily = weather.daily.slice(0, 3);\n  const hourly = weather.hourly.slice(0, 12);\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: weatherStyles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: weatherStyles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 11\n    }\n  }, `${city ? city : state}, ${state_code !== undefined ? state_code + ',' : ''} ${country_code.toUpperCase()}`)), __jsx(\"div\", {\n    className: weatherStyles.main,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, __jsx(Hourly, {\n    hourly: hourly,\n    datetime: datetime,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 11\n    }\n  }), __jsx(Current, {\n    current: current,\n    datetime: datetime,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }\n  }), __jsx(Daily, {\n    daily: daily,\n    datetime: datetime,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport async function getServerSideProps(ctx) {\n  const loc_res = await fetch(`https://api.opencagedata.com/geocode/v1/json?key=9509e53adb5442c8829342e5c5b15438&q=${ctx.query.city}`);\n  const loc_data = await loc_res.json(); // access lat and long from data\n\n  const {\n    lat,\n    lng\n  } = loc_data.results[0].geometry; // search for weather data with lat and long data\n\n  const weather_res = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lng}&appid=${process.env.WEATHER_API}&units=imperial`);\n  const weather_data = await weather_res.json();\n  console.log(weather_data); // return to props\n\n  return {\n    props: {\n      location: loc_data.results[0],\n      weather: weather_data\n    }\n  };\n}\nexport default Weather;","map":{"version":3,"sources":["/Users/daveregg/git-repository-projects/nextjs-weather/pages/city/[weather].js"],"names":["weatherStyles","Layout","Current","Hourly","Daily","Weather","weather","location","console","log","datetime","Date","now","city","state","state_code","country_code","components","current","daily","slice","hourly","container","title","undefined","toUpperCase","main","getServerSideProps","ctx","loc_res","fetch","query","loc_data","json","lat","lng","results","geometry","weather_res","process","env","WEATHER_API","weather_data","props"],"mappings":"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","sourcesContent":["/*\n\nTODO\n= fallback to index when error\n= create components for flash, hourly, and daily\n= create components to isolate and provide more information(?)\n\n*/\nimport weatherStyles from './weather.module.scss';\nimport Layout from '../../components/layout/layout';\nimport Current from '../../components/weather/current';\nimport Hourly from '../../components/weather/hourly';\nimport Daily from '../../components/weather/daily';\n\n// Will return weather from the search query\nconst Weather = ({ weather, location }) => {\n  console.log(location)\n  const datetime = Date.now();\n  const { city, state, state_code, country_code } = location.components;\n  const { current } = weather;\n  const daily = weather.daily.slice(0,3)\n  const hourly = weather.hourly.slice(0,12);\n  return (\n    <Layout>\n      <div className={weatherStyles.container}>\n        <div className={weatherStyles.title}>\n          <h1>{`${city ? city : state}, ${state_code !== undefined ? state_code + ',' : ''} ${country_code.toUpperCase()}`}</h1>\n        </div>\n        <div className={weatherStyles.main}>\n          <Hourly hourly={hourly} datetime={datetime} />\n          <Current current={current} datetime={datetime} />\n          <Daily daily={daily} datetime={datetime} />\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport async function getServerSideProps(ctx) {\n  const loc_res = await fetch(`https://api.opencagedata.com/geocode/v1/json?key=9509e53adb5442c8829342e5c5b15438&q=${ctx.query.city}`);\n  const loc_data = await loc_res.json();\n  // access lat and long from data\n  const { lat, lng } = loc_data.results[0].geometry;\n  // search for weather data with lat and long data\n  const weather_res = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lng}&appid=${process.env.WEATHER_API}&units=imperial`);\n  const weather_data = await weather_res.json()\n\n  console.log(weather_data);\n  // return to props\n  return {\n    props: {\n      location: loc_data.results[0],\n      weather: weather_data\n    }\n  }\n}\n\nexport default Weather;"]},"metadata":{},"sourceType":"module"}