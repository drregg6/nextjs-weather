{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/daveregg/git-repository-projects/nextjs-weather/pages/city/[weather].js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\n/*\n\nTODO\n= fallback to index when error\n= create components for flash, hourly, and daily\n= create components to isolate and provide more information(?)\n\n*/\nimport Layout from '../../components/layout/layout'; // Will return weather from the search query\n\nvar Weather = function Weather(_ref) {\n  var weather = _ref.weather,\n      location = _ref.location;\n  console.log(location);\n  var _location$components = location.components,\n      city = _location$components.city,\n      state = _location$components.state,\n      country_code = _location$components.country_code;\n  var current = weather.current,\n      daily = weather.daily,\n      hourly = weather.hourly;\n  console.log(weather);\n  return __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, \"\".concat(city ? city : state, \", \").concat(country_code.toUpperCase()))));\n};\n\n_c = Weather;\nexport var __N_SSP = true;\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"sources":["/Users/daveregg/git-repository-projects/nextjs-weather/pages/city/[weather].js"],"names":["Layout","Weather","weather","location","console","log","components","city","state","country_code","current","daily","hourly","toUpperCase"],"mappings":";;;;;;AAAA;;;;;;;;AASA,OAAOA,MAAP,MAAmB,gCAAnB,C,CAEA;;AACA,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAA2B;AAAA,MAAxBC,OAAwB,QAAxBA,OAAwB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AACzCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AADyC,6BAEHA,QAAQ,CAACG,UAFN;AAAA,MAEjCC,IAFiC,wBAEjCA,IAFiC;AAAA,MAE3BC,KAF2B,wBAE3BA,KAF2B;AAAA,MAEpBC,YAFoB,wBAEpBA,YAFoB;AAAA,MAGjCC,OAHiC,GAGNR,OAHM,CAGjCQ,OAHiC;AAAA,MAGxBC,KAHwB,GAGNT,OAHM,CAGxBS,KAHwB;AAAA,MAGjBC,MAHiB,GAGNV,OAHM,CAGjBU,MAHiB;AAIzCR,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAQK,IAAI,GAAGA,IAAH,GAAUC,KAAtB,eAAgCC,YAAY,CAACI,WAAb,EAAhC,EADF,CADF,CADF;AAOD,CAZD;;KAAMZ,O;;AAiCN,eAAeA,OAAf","sourcesContent":["/*\n\nTODO\n= fallback to index when error\n= create components for flash, hourly, and daily\n= create components to isolate and provide more information(?)\n\n*/\n\nimport Layout from '../../components/layout/layout';\n\n// Will return weather from the search query\nconst Weather = ({ weather, location }) => {\n  console.log(location)\n  const { city, state, country_code } = location.components;\n  const { current, daily, hourly } = weather;\n  console.log(weather)\n  return (\n    <Layout>\n      <div>\n        <h1>{`${city ? city : state}, ${country_code.toUpperCase()}`}</h1>\n      </div>\n    </Layout>\n  )\n}\n\nexport async function getServerSideProps(ctx) {\n  const loc_res = await fetch(`https://api.opencagedata.com/geocode/v1/json?key=9509e53adb5442c8829342e5c5b15438&q=${ctx.query.city}`);\n  const loc_data = await loc_res.json();\n  // access lat and long from data\n  const { lat, lng } = loc_data.results[0].geometry;\n  // search for weather data with lat and long data\n  const weather_res = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lng}&appid=${process.env.WEATHER_API}&units=imperial`);\n  const weather_data = await weather_res.json()\n\n  console.log(weather_data);\n  // return to props\n  return {\n    props: {\n      location: loc_data.results[0],\n      weather: weather_data\n    }\n  }\n}\n\nexport default Weather;"]},"metadata":{},"sourceType":"module"}