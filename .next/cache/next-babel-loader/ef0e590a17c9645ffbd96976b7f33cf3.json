{"ast":null,"code":"var _jsxFileName = \"/Users/daveregg/git-repository-projects/nextjs-weather/pages/city/[weather].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\n/*\n\nTODO\n= fallback to index when error\n= create components for flash, hourly, and daily\n= create components to isolate and provide more information(?)\n\n*/\nimport Layout from '../../components/layout/layout'; // Will return weather from the search query\n\nconst Weather = ({\n  weather,\n  location\n}) => {\n  console.log(location);\n  const {\n    city,\n    state,\n    country_code\n  } = location.components;\n  const {\n    current,\n    daily,\n    hourly\n  } = weather;\n  console.log(weather);\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, `${city ? city : state}, ${country_code.toUpperCase()}`)));\n};\n\nexport async function getServerSideProps(ctx) {\n  const loc_res = await fetch(`https://api.opencagedata.com/geocode/v1/json?key=9509e53adb5442c8829342e5c5b15438&q=${ctx.query.city}`);\n  const loc_data = await loc_res.json(); // access lat and long from data\n\n  const {\n    lat,\n    lng\n  } = loc_data.results[0].geometry; // search for weather data with lat and long data\n\n  const weather_res = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lng}&appid=${process.env.WEATHER_API}&units=imperial`);\n  const weather_data = await weather_res.json();\n  console.log(weather_data); // return to props\n\n  return {\n    props: {\n      location: loc_data.results[0],\n      weather: weather_data\n    }\n  };\n}\nexport default Weather;","map":{"version":3,"sources":["/Users/daveregg/git-repository-projects/nextjs-weather/pages/city/[weather].js"],"names":["Layout","Weather","weather","location","console","log","city","state","country_code","components","current","daily","hourly","toUpperCase","getServerSideProps","ctx","loc_res","fetch","query","loc_data","json","lat","lng","results","geometry","weather_res","process","env","WEATHER_API","weather_data","props"],"mappings":";;;;AAAA;;;;;;;;AASA,OAAOA,MAAP,MAAmB,gCAAnB,C,CAEA;;AACA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAD,KAA2B;AACzCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,QAAM;AAAEG,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAAgCL,QAAQ,CAACM,UAA/C;AACA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA6BV,OAAnC;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAM,GAAEI,IAAI,GAAGA,IAAH,GAAUC,KAAM,KAAIC,YAAY,CAACK,WAAb,EAA2B,EAA3D,CADF,CADF,CADF;AAOD,CAZD;;AAcA,OAAO,eAAeC,kBAAf,CAAkCC,GAAlC,EAAuC;AAC5C,QAAMC,OAAO,GAAG,MAAMC,KAAK,CAAE,uFAAsFF,GAAG,CAACG,KAAJ,CAAUZ,IAAK,EAAvG,CAA3B;AACA,QAAMa,QAAQ,GAAG,MAAMH,OAAO,CAACI,IAAR,EAAvB,CAF4C,CAG5C;;AACA,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAeH,QAAQ,CAACI,OAAT,CAAiB,CAAjB,EAAoBC,QAAzC,CAJ4C,CAK5C;;AACA,QAAMC,WAAW,GAAG,MAAMR,KAAK,CAAE,uDAAsDI,GAAI,QAAOC,GAAI,UAASI,OAAO,CAACC,GAAR,CAAYC,WAAY,iBAAxG,CAA/B;AACA,QAAMC,YAAY,GAAG,MAAMJ,WAAW,CAACL,IAAZ,EAA3B;AAEAhB,EAAAA,OAAO,CAACC,GAAR,CAAYwB,YAAZ,EAT4C,CAU5C;;AACA,SAAO;AACLC,IAAAA,KAAK,EAAE;AACL3B,MAAAA,QAAQ,EAAEgB,QAAQ,CAACI,OAAT,CAAiB,CAAjB,CADL;AAELrB,MAAAA,OAAO,EAAE2B;AAFJ;AADF,GAAP;AAMD;AAED,eAAe5B,OAAf","sourcesContent":["/*\n\nTODO\n= fallback to index when error\n= create components for flash, hourly, and daily\n= create components to isolate and provide more information(?)\n\n*/\n\nimport Layout from '../../components/layout/layout';\n\n// Will return weather from the search query\nconst Weather = ({ weather, location }) => {\n  console.log(location)\n  const { city, state, country_code } = location.components;\n  const { current, daily, hourly } = weather;\n  console.log(weather)\n  return (\n    <Layout>\n      <div>\n        <h1>{`${city ? city : state}, ${country_code.toUpperCase()}`}</h1>\n      </div>\n    </Layout>\n  )\n}\n\nexport async function getServerSideProps(ctx) {\n  const loc_res = await fetch(`https://api.opencagedata.com/geocode/v1/json?key=9509e53adb5442c8829342e5c5b15438&q=${ctx.query.city}`);\n  const loc_data = await loc_res.json();\n  // access lat and long from data\n  const { lat, lng } = loc_data.results[0].geometry;\n  // search for weather data with lat and long data\n  const weather_res = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lng}&appid=${process.env.WEATHER_API}&units=imperial`);\n  const weather_data = await weather_res.json()\n\n  console.log(weather_data);\n  // return to props\n  return {\n    props: {\n      location: loc_data.results[0],\n      weather: weather_data\n    }\n  }\n}\n\nexport default Weather;"]},"metadata":{},"sourceType":"module"}