{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/daveregg/git-repository-projects/nextjs-weather/pages/city/hourly.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from 'react';\nimport Link from 'next/link';\nimport hourlyStyles from './hourly.module.scss';\nimport { changeUnit, windDegToDir, toMilesPerHour } from '../../utils/weatherHelper';\nimport Layout from '../../components/layout/layout';\nimport Hour from '../../components/hourly/hour';\n\nvar Hourly = function Hourly(_ref) {\n  _s();\n\n  var location = _ref.location,\n      hourly = _ref.hourly;\n\n  var _useState = useState({\n    isFahrenheit: false,\n    isCelsius: true,\n    isKelvin: false\n  }),\n      units = _useState[0],\n      changeUnits = _useState[1];\n\n  var isFahrenheit = units.isFahrenheit,\n      isCelsius = units.isCelsius;\n  var datetime = Date.now();\n  var _location$components = location.components,\n      city = _location$components.city,\n      state = _location$components.state;\n  var link;\n\n  if (city !== undefined) {\n    link = city.toLowerCase();\n  } else {\n    link = state.toLowerCase();\n  }\n\n  var handleFahrenheit = function handleFahrenheit() {\n    changeUnits({\n      isFahrenheit: true,\n      isCelsius: false,\n      isKelvin: false\n    });\n  };\n\n  var handleCelsius = function handleCelsius() {\n    changeUnits({\n      isFahrenheit: false,\n      isCelsius: true,\n      isKelvin: false\n    });\n  };\n\n  var handleKelvin = function handleKelvin() {\n    changeUnits({\n      isFahrenheit: false,\n      isCelsius: false,\n      isKelvin: true\n    });\n  };\n\n  return __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: hourlyStyles.top,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, __jsx(Link, {\n    href: \"/city/weather?city=\".concat(link),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, __jsx(\"a\", {\n    className: hourlyStyles.back,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 51\n    }\n  }, \"\\u2190 Go back\")), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, __jsx(\"span\", {\n    onClick: handleCelsius,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 12\n    }\n  }, \"\\xB0C\"), \" | \", __jsx(\"span\", {\n    onClick: handleFahrenheit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 58\n    }\n  }, \"\\xB0F\"), \" | \", __jsx(\"span\", {\n    onClick: handleKelvin,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 107\n    }\n  }, \"\\xB0K\"))), __jsx(\"h1\", {\n    className: hourlyStyles.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, link.toUpperCase()), __jsx(\"table\", {\n    className: hourlyStyles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, __jsx(\"tr\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, __jsx(\"th\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }, \"Time\"), __jsx(\"th\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, \"Image\"), __jsx(\"th\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }, \"Description\"), __jsx(\"th\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }, \"Temperature\"), __jsx(\"th\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, \"Feels Like\"), __jsx(\"th\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }, \"Wind\")), hourly.slice(0, 12).map(function (hour, idx) {\n    var icon = hour.weather[0].icon;\n    var desc = hour.weather[0].description;\n    var windDeg = windDegToDir(hour.wind_deg);\n    var windSpd = hour.wind_speed;\n    var temp = Math.floor(hour.temp);\n    var feelsLike = Math.floor(hour.feels_like);\n\n    if (isFahrenheit) {\n      temp = changeUnit(temp, 'f');\n      feelsLike = changeUnit(feelsLike, 'f');\n      windSpd = toMilesPerHour(windSpd);\n    } else if (isCelsius) {\n      temp = changeUnit(temp, 'c');\n      feelsLike = changeUnit(feelsLike, 'c');\n      windSpd = Math.floor(hour.wind_speed);\n    } else {\n      temp = changeUnit(temp, 'k');\n      feelsLike = changeUnit(feelsLike, 'k');\n      windSpd = Math.floor(hour.wind_speed);\n    }\n\n    return __jsx(Hour, {\n      datetime: datetime,\n      key: idx,\n      icon: icon,\n      temp: temp,\n      feelsLike: feelsLike,\n      isFahrenheit: isFahrenheit,\n      isCelsius: isCelsius,\n      idx: idx,\n      desc: desc,\n      windDeg: windDeg,\n      windSpd: windSpd,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 15\n      }\n    });\n  })));\n};\n\n_s(Hourly, \"Qe7zmG0ARdmO1H+k7oGptkqRIQU=\");\n\n_c = Hourly;\nexport var __N_SSP = true;\nexport default Hourly;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hourly\");","map":{"version":3,"sources":["/Users/daveregg/git-repository-projects/nextjs-weather/pages/city/hourly.js"],"names":["useState","Link","hourlyStyles","changeUnit","windDegToDir","toMilesPerHour","Layout","Hour","Hourly","location","hourly","isFahrenheit","isCelsius","isKelvin","units","changeUnits","datetime","Date","now","components","city","state","link","undefined","toLowerCase","handleFahrenheit","handleCelsius","handleKelvin","top","back","title","toUpperCase","container","slice","map","hour","idx","icon","weather","desc","description","windDeg","wind_deg","windSpd","wind_speed","temp","Math","floor","feelsLike","feels_like"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport Link from 'next/link';\nimport hourlyStyles from './hourly.module.scss';\nimport {\n  changeUnit,\n  windDegToDir,\n  toMilesPerHour\n} from '../../utils/weatherHelper';\n\nimport Layout from '../../components/layout/layout';\nimport Hour from '../../components/hourly/hour';\n\nconst Hourly = ({ location, hourly }) => {\n  const [ units, changeUnits ] = useState({\n    isFahrenheit: false,\n    isCelsius: true,\n    isKelvin: false\n  });\n  let { isFahrenheit, isCelsius } = units;\n\n  const datetime = Date.now();\n  const { city, state } = location.components;\n  let link;\n  if (city !== undefined) {\n    link = city.toLowerCase();\n  } else {\n    link = state.toLowerCase();\n  }\n\n  const handleFahrenheit = () => {\n    changeUnits({\n      isFahrenheit: true,\n      isCelsius: false,\n      isKelvin: false\n    });\n  }\n  const handleCelsius = () => {\n    changeUnits({\n      isFahrenheit: false,\n      isCelsius: true,\n      isKelvin: false\n    });\n  }\n  const handleKelvin = () => {\n    changeUnits({\n      isFahrenheit: false,\n      isCelsius: false,\n      isKelvin: true\n    })\n  }\n\n  return (\n    <Layout>\n      <div className={hourlyStyles.top}>\n        <Link href={`/city/weather?city=${link}`}><a className={hourlyStyles.back}>&#8592; Go back</a></Link>\n        <p><span onClick={handleCelsius}>&deg;C</span> | <span onClick={handleFahrenheit}>&deg;F</span> | <span onClick={handleKelvin}>&deg;K</span></p>\n      </div>\n      <h1 className={hourlyStyles.title}>{ link.toUpperCase() }</h1>\n      <table className={hourlyStyles.container}>\n        <tr>\n          <th>Time</th>\n          <th>Image</th>\n          <th>Description</th>\n          <th>Temperature</th>\n          <th>Feels Like</th>\n          <th>Wind</th>\n        </tr>\n        {\n          hourly.slice(0,12).map((hour, idx) => {\n            const icon = hour.weather[0].icon;\n            const desc = hour.weather[0].description;\n            const windDeg = windDegToDir(hour.wind_deg)\n\n            let windSpd = hour.wind_speed;\n            let temp = Math.floor(hour.temp);\n            let feelsLike = Math.floor(hour.feels_like);\n            if (isFahrenheit) {\n              temp = changeUnit(temp, 'f');\n              feelsLike = changeUnit(feelsLike, 'f');\n              windSpd = toMilesPerHour(windSpd);\n            } else if (isCelsius) {\n              temp = changeUnit(temp, 'c');\n              feelsLike = changeUnit(feelsLike, 'c');\n              windSpd = Math.floor(hour.wind_speed);\n            } else {\n              temp = changeUnit(temp, 'k');\n              feelsLike = changeUnit(feelsLike, 'k');\n              windSpd = Math.floor(hour.wind_speed);\n            }\n            return (\n              <Hour\n                datetime={datetime}\n                key={idx}\n                icon={icon}\n                temp={temp}\n                feelsLike={feelsLike}\n                isFahrenheit={isFahrenheit}\n                isCelsius={isCelsius}\n                idx={idx}\n                desc={desc}\n                windDeg={windDeg}\n                windSpd={windSpd}\n              />\n            )\n          })\n        }\n      </table>\n    </Layout>\n  )\n}\n\nexport async function getServerSideProps(ctx) {\n  const loc_res = await fetch(`https://api.opencagedata.com/geocode/v1/json?key=9509e53adb5442c8829342e5c5b15438&q=${ctx.query.city}`);\n  const loc_data = await loc_res.json();\n  // access lat and long from data\n  const { lat, lng } = loc_data.results[0].geometry;\n  // search for weather data with lat and long data\n  const weather_res = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lng}&appid=${process.env.WEATHER_API}&units=metric`);\n  const weather_data = await weather_res.json()\n\n  console.log(weather_data);\n  // return to props\n  return {\n    props: {\n      location: loc_data.results[0],\n      hourly: weather_data.hourly\n    }\n  }\n}\n\nexport default Hourly;"]},"metadata":{},"sourceType":"module"}