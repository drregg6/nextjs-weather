{"ast":null,"code":"var _jsxFileName = \"/Users/daveregg/git-repository-projects/nextjs-weather/pages/city/[weather].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\n/*\n\nTODO\n= fallback to index when error\n= create components for flash, hourly, and daily\n= create components to isolate and provide more information(?)\n\n*/\nimport weatherStyles from './weather.module.scss';\nimport Layout from '../../components/layout/layout';\nimport Current from '../../components/weather/current';\nimport Hourly from '../../components/weather/hourly';\nimport Daily from '../../components/weather/daily'; // Will return weather from the search query\n\nconst Weather = ({\n  weather,\n  location\n}) => {\n  console.log(location);\n  const {\n    city,\n    state,\n    country_code\n  } = location.components;\n  const {\n    current\n  } = weather;\n  const daily = weather.daily.slice(0, 3);\n  const hourly = weather.hourly.slice(0, 12);\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, __jsx(\"h1\", {\n    className: weatherStyles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, `${city ? city : state}, ${country_code.toUpperCase()}`), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, __jsx(Current, {\n    current: current,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 11\n    }\n  }), __jsx(Daily, {\n    daily: daily,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 11\n    }\n  }), __jsx(Hourly, {\n    hourly: hourly,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport async function getServerSideProps(ctx) {\n  const now = Date.now();\n  const loc_res = await fetch(`https://api.opencagedata.com/geocode/v1/json?key=9509e53adb5442c8829342e5c5b15438&q=${ctx.query.city}`);\n  const loc_data = await loc_res.json(); // access lat and long from data\n\n  const {\n    lat,\n    lng\n  } = loc_data.results[0].geometry; // search for weather data with lat and long data\n\n  const weather_res = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lng}&appid=${process.env.WEATHER_API}&units=imperial&dt=${now}`);\n  const weather_data = await weather_res.json();\n  console.log(weather_data); // return to props\n\n  return {\n    props: {\n      location: loc_data.results[0],\n      weather: weather_data\n    }\n  };\n}\nexport default Weather;","map":{"version":3,"sources":["/Users/daveregg/git-repository-projects/nextjs-weather/pages/city/[weather].js"],"names":["weatherStyles","Layout","Current","Hourly","Daily","Weather","weather","location","console","log","city","state","country_code","components","current","daily","slice","hourly","title","toUpperCase","getServerSideProps","ctx","now","Date","loc_res","fetch","query","loc_data","json","lat","lng","results","geometry","weather_res","process","env","WEATHER_API","weather_data","props"],"mappings":";;;;AAAA;;;;;;;;AAQA,OAAOA,aAAP,MAA0B,uBAA1B;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,OAAP,MAAoB,kCAApB;AACA,OAAOC,MAAP,MAAmB,iCAAnB;AACA,OAAOC,KAAP,MAAkB,gCAAlB,C,CAEA;;AACA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAD,KAA2B;AACzCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,QAAM;AAAEG,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAAgCL,QAAQ,CAACM,UAA/C;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAcR,OAApB;AACA,QAAMS,KAAK,GAAGT,OAAO,CAACS,KAAR,CAAcC,KAAd,CAAoB,CAApB,EAAsB,CAAtB,CAAd;AACA,QAAMC,MAAM,GAAGX,OAAO,CAACW,MAAR,CAAeD,KAAf,CAAqB,CAArB,EAAuB,EAAvB,CAAf;AACA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAEhB,aAAa,CAACkB,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsC,GAAER,IAAI,GAAGA,IAAH,GAAUC,KAAM,KAAIC,YAAY,CAACO,WAAb,EAA2B,EAA3F,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAS,IAAA,OAAO,EAAEL,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,KAAD;AAAO,IAAA,KAAK,EAAEC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,MAAC,MAAD;AAAQ,IAAA,MAAM,EAAEE,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CAFF,CADF,CADF;AAYD,CAlBD;;AAoBA,OAAO,eAAeG,kBAAf,CAAkCC,GAAlC,EAAuC;AAC5C,QAAMC,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;AACA,QAAME,OAAO,GAAG,MAAMC,KAAK,CAAE,uFAAsFJ,GAAG,CAACK,KAAJ,CAAUhB,IAAK,EAAvG,CAA3B;AACA,QAAMiB,QAAQ,GAAG,MAAMH,OAAO,CAACI,IAAR,EAAvB,CAH4C,CAI5C;;AACA,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAeH,QAAQ,CAACI,OAAT,CAAiB,CAAjB,EAAoBC,QAAzC,CAL4C,CAM5C;;AACA,QAAMC,WAAW,GAAG,MAAMR,KAAK,CAAE,uDAAsDI,GAAI,QAAOC,GAAI,UAASI,OAAO,CAACC,GAAR,CAAYC,WAAY,sBAAqBd,GAAI,EAAjI,CAA/B;AACA,QAAMe,YAAY,GAAG,MAAMJ,WAAW,CAACL,IAAZ,EAA3B;AAEApB,EAAAA,OAAO,CAACC,GAAR,CAAY4B,YAAZ,EAV4C,CAW5C;;AACA,SAAO;AACLC,IAAAA,KAAK,EAAE;AACL/B,MAAAA,QAAQ,EAAEoB,QAAQ,CAACI,OAAT,CAAiB,CAAjB,CADL;AAELzB,MAAAA,OAAO,EAAE+B;AAFJ;AADF,GAAP;AAMD;AAED,eAAehC,OAAf","sourcesContent":["/*\n\nTODO\n= fallback to index when error\n= create components for flash, hourly, and daily\n= create components to isolate and provide more information(?)\n\n*/\nimport weatherStyles from './weather.module.scss';\nimport Layout from '../../components/layout/layout';\nimport Current from '../../components/weather/current';\nimport Hourly from '../../components/weather/hourly';\nimport Daily from '../../components/weather/daily';\n\n// Will return weather from the search query\nconst Weather = ({ weather, location }) => {\n  console.log(location)\n  const { city, state, country_code } = location.components;\n  const { current } = weather;\n  const daily = weather.daily.slice(0,3)\n  const hourly = weather.hourly.slice(0,12);\n  return (\n    <Layout>\n      <div>\n        <h1 className={weatherStyles.title}>{`${city ? city : state}, ${country_code.toUpperCase()}`}</h1>\n        <div>\n          <Current current={current} />\n          <Daily daily={daily} />\n          <Hourly hourly={hourly} />\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport async function getServerSideProps(ctx) {\n  const now = Date.now();\n  const loc_res = await fetch(`https://api.opencagedata.com/geocode/v1/json?key=9509e53adb5442c8829342e5c5b15438&q=${ctx.query.city}`);\n  const loc_data = await loc_res.json();\n  // access lat and long from data\n  const { lat, lng } = loc_data.results[0].geometry;\n  // search for weather data with lat and long data\n  const weather_res = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lng}&appid=${process.env.WEATHER_API}&units=imperial&dt=${now}`);\n  const weather_data = await weather_res.json()\n\n  console.log(weather_data);\n  // return to props\n  return {\n    props: {\n      location: loc_data.results[0],\n      weather: weather_data\n    }\n  }\n}\n\nexport default Weather;"]},"metadata":{},"sourceType":"module"}